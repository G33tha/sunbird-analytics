
# learner analytics

9a221916-3f2c-4a83-baef-28b10bbec9f7

# get the scores and the assessed concepts of a learner

MATCH (x:Learner{id:'9a221916-3f2c-4a83-baef-28b10bbec9f7'})-[r1:ASSESSED_IN]->(y:Concept) RETURN y.id,r1.score,y.objectType


# get concepts 1-hop away from what the learner has already known, played
# restrict the concepts type to Concepts (not Domain level for eg)

MATCH (x:Learner{id:'9a221916-3f2c-4a83-baef-28b10bbec9f7'})-[r1:ASSESSED_IN]->(y:Concept)-[r2:isParentOf*2]-(
z:Concept{objectType:'Concept'}) RETURN x,r1,r2,z

# now get to the content level too

MATCH (x:Learner{id:'9a221916-3f2c-4a83-baef-28b10bbec9f7'})-[r1:ASSESSED_IN]->(y:Concept)-[r2:isParentOf*2]-(z:Concept{objectType:'Concept'})-[r3:COVERED_IN]->(g:Content) RETURN x,r1,r2,z,g

# unfortunately, if no content is available, go higher-up in the domain (to salvage basically)
# check which content has concept coverage information

MATCH (x:Concept)-[COVERED_IN]-(y:Content) RETURN x,y

# after having created "mock" coverage relationships, try the query again

MATCH (x:Learner{id:'9a221916-3f2c-4a83-baef-28b10bbec9f7'})-[r1:ASSESSED_IN]->(y:Concept)-[r2:isParentOf*2]-(z:Concept{objectType:'Concept'})-[r3:COVERED_IN_TEST]->(g:Content) RETURN x,r1,r2,z,g

# order Content by score
MATCH (x:Learner{id:'9a221916-3f2c-4a83-baef-28b10bbec9f7'})-[r1:ASSESSED_IN]->(y:Concept)-[r2:isParentOf*4]-(z:Concept{objectType:'Concept'})-[r3:COVERED_IN_TEST]->(g:Content) RETURN COUNT(DISTINCY g.id) as game,r1.score as score,r4.ipm as ipm

# get Content that was engaging
MATCH (x:Learner{id:'9a221916-3f2c-4a83-baef-28b10bbec9f7'})-[r1:ASSESSED_IN]->(y:Concept)-[r2:isParentOf*4]-(z:Concept{objectType:'Concept'})-[r3:COVERED_IN_TEST]->(g:Content),(g)<-[r4:INTERACTED_WITH]-(XX:Learner) WITH avg(r1.score) as score,avg(coalesce(r4.ipm,0)) as meanIpm, g.id as gid RETURN gid,score,meanIpm,SUM(score+meanIpm) as net ORDER By net DESC

# or filter content by grade, or lang
figure this learner's grade
MATCH (x:Learner {id:'9a221916-3f2c-4a83-baef-28b10bbec9f7'})-[r]-(y:Content) RETURN y.gradeLevel as grade, COUNT(*) as gradeCount ORDER BY gradeCount DESC limit 1


# filter by just Grade
MATCH (x:Learner{id:'9a221916-3f2c-4a83-baef-28b10bbec9f7'})-[r1:ASSESSED_IN]->(y:Concept)-[r2:isParentOf*4]-(z:Concept{objectType:'Concept'})-[r3:COVERED_IN_TEST]->(g:Content{gradeLevel:'Grade 2'}) RETURN g.id as gid


# filter by grade and sort by score and ipm
MATCH (x:Learner{id:'9a221916-3f2c-4a83-baef-28b10bbec9f7'})-[r1:ASSESSED_IN]->(y:Concept)-[r2:isParentOf*4]-(z:Concept{objectType:'Concept'})-[r3:COVERED_IN_TEST]->(g:Content{gradeLevel:'Grade 1'}),(g)<-[r4:INTERACTED_WITH]-(XX:Learner) WITH avg(r1.score) as score,avg(coalesce(r4.ipm,0)) as meanIpm, g.id as gid RETURN gid,score,meanIpm,SUM(score+meanIpm) as net ORDER By net DESC


# colloborative filtering
# get content found engaging by other learners













